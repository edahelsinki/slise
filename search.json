[{"path":"https://edahelsinki.github.io/slise/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Anton Björklund. Author, maintainer. Andreas Henelius. Author. Kai Puolamäki. Author.","code":""},{"path":"https://edahelsinki.github.io/slise/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Anton Björklund, Andreas Henelius, Emilia Oikarinen, Kimmo Kallonen, Kai Puolamäki (2019). Sparse robust regression explaining classifiers. Proceedings 22nd International Conference Discovery Science, DOI: 10.1007/978-3-030-33778-0_27 Anton Björklund, Andreas Henelius, Emilia Oikarinen, Kimmo Kallonen, Kai Puolamäki (2022). Robust Regression via Error Tolerance. Data Mining Knowledge Discovery, DOI: 10.1007/s10618-022-00819-2","code":"@InProceedings{,   title = {Sparse Robust Regression for Explaining Classifiers},   author = {Anton Björklund and Andreas Henelius and Emilia Oikarinen and Kimmo Kallonen and Kai Puolamäki},   journal = {Lecture Notes in Computer Science},   booktitle = {Proceedings of the 22nd International Conference on Discovery Science},   year = {2019},   doi = {10.1007/978-3-030-33778-0_27}, } @Article{,   title = {Robust Regression via Error Tolerance},   author = {Anton Björklund and Andreas Henelius and Emilia Oikarinen and Kimmo Kallonen and Kai Puolamäki},   journal = {Data Mining and Knowledge Discovery},   year = {2022},   doi = {10.1007/s10618-022-00819-2}, }"},{"path":"https://edahelsinki.github.io/slise/index.html","id":"slise---sparse-linear-subset-explanations","dir":"","previous_headings":"","what":"Sparse Linear Subset Explanations","title":"Sparse Linear Subset Explanations","text":"R implementation SLISE algorithm. SLISE algorithm can used robust regression explain outcomes black box models. details see conference paper, robust regression paper local explanations paper. Alternatively informal overview see presentation, poster. Finally, also documentation. Björklund ., Henelius ., Oikarinen E., Kallonen K., Puolamäki K. (2019)Sparse Robust Regression Explaining Classifiers. Discovery Science (DS 2019). Lecture Notes Computer Science, vol 11828, Springer.https://doi.org/10.1007/978-3-030-33778-0_27 Björklund ., Henelius ., Oikarinen E., Kallonen K., Puolamäki K. (2022).Robust regression via error tolerance. Data Mining Knowledge Discovery.https://doi.org/10.1007/s10618-022-00819-2 Björklund ., Henelius ., Oikarinen E., Kallonen K., Puolamäki K. (2023)Explaining black box model using real data. Frontiers Computer Science 5:1143904. https://doi.org/10.3389/fcomp.2023.1143904","code":""},{"path":"https://edahelsinki.github.io/slise/index.html","id":"the-idea","dir":"","previous_headings":"","what":"The idea","title":"Sparse Linear Subset Explanations","text":"robust regression fit regression models can handle data contains outliers (see example outliers problematic normal regression). SLISE accomplishes fitting model largest possible subset data items error less given value. items error larger considered potential outliers affect resulting model. SLISE can also used provide local model-agnostic explanations outcomes black box models. replace ground truth response vector predictions complex model. Furthermore, force model fit selected item (making explanation local). gives us local approximation complex model simpler linear model (similar , e.g., LIME SHAP). contrast methods SLISE creates explanations using real data (discretised randomly sampled data) can sure inputs valid (follows constraints data generated, e.g., laws physics).","code":""},{"path":"https://edahelsinki.github.io/slise/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Sparse Linear Subset Explanations","text":"Using devtools-package (install.packages(\"devtools\")) install slise package: installation, load package using:","code":"devtools::install_github(\"edahelsinki/slise\") library(slise)"},{"path":"https://edahelsinki.github.io/slise/index.html","id":"other-languages","dir":"","previous_headings":"","what":"Other Languages","title":"Sparse Linear Subset Explanations","text":"official Python version can found .","code":""},{"path":"https://edahelsinki.github.io/slise/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Sparse Linear Subset Explanations","text":"order use SLISE need data numerical matrix (something can cast matrix), response numerical vector. example SLISE used robust regression: Robust Regression Example Plot SLISE can also used explain predictions black box models convolutional neural networks: Explanation Example Plot","code":"library(slise) library(ggplot2) set.seed(42)  x <- seq(-1, 1, length.out = 50) y <- -x + rnorm(50, 0, 0.15) x <- c(x, rep(seq(1.6, 1.8, 0.1), 2)) y <- c(y, rep(c(1.8, 1.95), each = 3))  ols <- lm(y ~ x)$coefficients slise <- slise.fit(x, y, epsilon = 0.5)  plot(slise, title = \"\", partial = TRUE, size = 2) +     geom_abline(aes(intercept = ols[1], slope = ols[2], color = \"OLS\", linetype = \"OLS\"), size = 2) +     scale_color_manual(values = c(\"#1b9e77\", \"#fda411\"), name = NULL) +     scale_linetype_manual(values = 2:1, name = NULL) +     theme(axis.title.y = element_text(angle = 0, vjust = 0.5), legend.key.size = grid::unit(2, \"line\")) +     guides(shape = FALSE, color = \"legend\", linetype = \"legend\") library(slise) set.seed(42)  source(\"experiments/explanations/data.R\") emnist <- data_emnist(digit=2)  slise <- slise.explain(emnist$X, emnist$Y, 0.5, emnist$X[17,], emnist$Y[17], logit=TRUE, lambda1=3, lambda2=6) plot(slise, \"image\", \"\", c(\"not 2\", \"is 2\"), plots = 1)"},{"path":"https://edahelsinki.github.io/slise/index.html","id":"dependencies","dir":"","previous_headings":"","what":"Dependencies","title":"Sparse Linear Subset Explanations","text":"SLISE depends following R-packages: Rcpp RcppArmadillo lbfgs following R-packages optional, needed built-visualisations: ggplot2 grid gridExtra reshape2 wordcloud","code":""},{"path":"https://edahelsinki.github.io/slise/reference/auto_named_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a named list where the names are taken from the input variables — auto_named_list","title":"Creates a named list where the names are taken from the input variables — auto_named_list","text":"NOTE: supports arguments, keyword arguments","code":""},{"path":"https://edahelsinki.github.io/slise/reference/auto_named_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a named list where the names are taken from the input variables — auto_named_list","text":"","code":"auto_named_list(...)"},{"path":"https://edahelsinki.github.io/slise/reference/auto_named_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a named list where the names are taken from the input variables — auto_named_list","text":"... list elements","code":""},{"path":"https://edahelsinki.github.io/slise/reference/auto_named_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a named list where the names are taken from the input variables — auto_named_list","text":"named list elements","code":""},{"path":"https://edahelsinki.github.io/slise/reference/auto_named_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a named list where the names are taken from the input variables — auto_named_list","text":"","code":"a <- 1 b <- 2 auto_named_list(a, b)$a == 1 #> [1] TRUE auto_named_list(a, b)$b == 2 #> [1] TRUE"},{"path":"https://edahelsinki.github.io/slise/reference/data_container.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper for creating a C++ DataContainer that parses parameter names — data_container","title":"Wrapper for creating a C++ DataContainer that parses parameter names — data_container","text":"Wrapper creating C++ DataContainer parses parameter names","code":""},{"path":"https://edahelsinki.github.io/slise/reference/data_container.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper for creating a C++ DataContainer that parses parameter names — data_container","text":"","code":"data_container(X, Y, epsilon, beta, lambda1 = 0, lambda2 = 0, weight = NULL)"},{"path":"https://edahelsinki.github.io/slise/reference/data_container.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper for creating a C++ DataContainer that parses parameter names — data_container","text":"X data matrix Y response vector epsilon error tolerance beta sigmoid steepness lambda1 L1 regularisation (default: 0) lambda2 L2 regularisation (default: 0) weight weight vector (default: NULL)","code":""},{"path":"https://edahelsinki.github.io/slise/reference/data_container.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper for creating a C++ DataContainer that parses parameter names — data_container","text":"DataContainer","code":""},{"path":"https://edahelsinki.github.io/slise/reference/dlog_sigmoid.html","id":null,"dir":"Reference","previous_headings":"","what":"derivative of log-sigmoid function — dlog_sigmoid","title":"derivative of log-sigmoid function — dlog_sigmoid","text":"derivative log-sigmoid function","code":""},{"path":"https://edahelsinki.github.io/slise/reference/dlog_sigmoid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"derivative of log-sigmoid function — dlog_sigmoid","text":"","code":"dlog_sigmoid(x)"},{"path":"https://edahelsinki.github.io/slise/reference/dlog_sigmoid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"derivative of log-sigmoid function — dlog_sigmoid","text":"x vector real values","code":""},{"path":"https://edahelsinki.github.io/slise/reference/dlog_sigmoid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"derivative of log-sigmoid function — dlog_sigmoid","text":"Derivative log(sigmoid(x)).","code":""},{"path":"https://edahelsinki.github.io/slise/reference/dsigmoid.html","id":null,"dir":"Reference","previous_headings":"","what":"derivative of sigmoid function — dsigmoid","title":"derivative of sigmoid function — dsigmoid","text":"derivative sigmoid function","code":""},{"path":"https://edahelsinki.github.io/slise/reference/dsigmoid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"derivative of sigmoid function — dsigmoid","text":"","code":"dsigmoid(x)"},{"path":"https://edahelsinki.github.io/slise/reference/dsigmoid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"derivative of sigmoid function — dsigmoid","text":"x vector real values","code":""},{"path":"https://edahelsinki.github.io/slise/reference/dsigmoid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"derivative of sigmoid function — dsigmoid","text":"Derivative sigmoid(x).","code":""},{"path":"https://edahelsinki.github.io/slise/reference/fast_ols.html","id":null,"dir":"Reference","previous_headings":"","what":"OLS solver that falls back to an optimisation if ncol(X) is huge\nAlso supports LASSO via optimisation — fast_ols","title":"OLS solver that falls back to an optimisation if ncol(X) is huge\nAlso supports LASSO via optimisation — fast_ols","text":"OLS solver falls back optimisation ncol(X) huge Also supports LASSO via optimisation","code":""},{"path":"https://edahelsinki.github.io/slise/reference/fast_ols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OLS solver that falls back to an optimisation if ncol(X) is huge\nAlso supports LASSO via optimisation — fast_ols","text":"","code":"fast_ols(X, Y, weight = NULL, lambda = 0, max_iterations = 300)"},{"path":"https://edahelsinki.github.io/slise/reference/fast_ols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"OLS solver that falls back to an optimisation if ncol(X) is huge\nAlso supports LASSO via optimisation — fast_ols","text":"X data matrix Y response vector weight weight vector (default: NULL) lambda LASSO regularisation (default: 0) max_iterations ncol(X) huge, ols replaced optimisation (default:300)","code":""},{"path":"https://edahelsinki.github.io/slise/reference/fast_ols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"OLS solver that falls back to an optimisation if ncol(X) is huge\nAlso supports LASSO via optimisation — fast_ols","text":"coefficient vector","code":""},{"path":"https://edahelsinki.github.io/slise/reference/grad_opt_debug.html","id":null,"dir":"Reference","previous_headings":"","what":"Print debug statement for how the graduated optimisation is going — grad_opt_debug","title":"Print debug statement for how the graduated optimisation is going — grad_opt_debug","text":"Print debug statement graduated optimisation going","code":""},{"path":"https://edahelsinki.github.io/slise/reference/grad_opt_debug.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print debug statement for how the graduated optimisation is going — grad_opt_debug","text":"","code":"grad_opt_debug(alpha, X, Y, epsilon, beta, lambda1, lambda2, weight, beta_max)"},{"path":"https://edahelsinki.github.io/slise/reference/grad_opt_debug.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print debug statement for how the graduated optimisation is going — grad_opt_debug","text":"alpha linear model X data matrix Y response vector epsilon error tolerance beta current sigmoid steepness lambda1 L1 coefficients lambda2 L2 coefficients weight weight vector beta_max max sigmoid steepness","code":""},{"path":"https://edahelsinki.github.io/slise/reference/graduated_optimisation.html","id":null,"dir":"Reference","previous_headings":"","what":"Graduated Optimisation to solve the SLISE problem — graduated_optimisation","title":"Graduated Optimisation to solve the SLISE problem — graduated_optimisation","text":"Graduated Optimisation solve SLISE problem","code":""},{"path":"https://edahelsinki.github.io/slise/reference/graduated_optimisation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Graduated Optimisation to solve the SLISE problem — graduated_optimisation","text":"","code":"graduated_optimisation(   alpha,   X,   Y,   epsilon,   beta = 0,   lambda1 = 0,   lambda2 = 0,   weight = NULL,   beta_max = 20/epsilon^2,   max_approx = 1.15,   max_iterations = 300,   beta_min_increase = beta_max * 5e-04,   debug = FALSE,   ... )"},{"path":"https://edahelsinki.github.io/slise/reference/graduated_optimisation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Graduated Optimisation to solve the SLISE problem — graduated_optimisation","text":"alpha Initial linear model (NULL OLS) X Data matrix Y Response vector epsilon Error tolerance beta Starting sigmoid steepness (default: 0 == convex problem) lambda1 L1 coefficient (default: 0) lambda2 L1 coefficient (default: 0) weight Weight vector (default: NULL == weights) beta_max Stopping sigmoid steepness (default: 20 / epsilon^2) max_approx Approximation ratio selecting next beta (default: 1.15) max_iterations Maximum number OWL-QN iterations (default: 300) beta_min_increase Minimum amount increase beta (default: beta_max * 0.0005) debug debug statement printed iteration (default: FALSE) ... Additional parameters OWL-QN","code":""},{"path":"https://edahelsinki.github.io/slise/reference/graduated_optimisation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Graduated Optimisation to solve the SLISE problem — graduated_optimisation","text":"lbfgs object beta (max) number iteration steps","code":""},{"path":"https://edahelsinki.github.io/slise/reference/limited_logit.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes the logits from probabilities — limited_logit","title":"Computes the logits from probabilities — limited_logit","text":"Computes logits probabilities","code":""},{"path":"https://edahelsinki.github.io/slise/reference/limited_logit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes the logits from probabilities — limited_logit","text":"","code":"limited_logit(p, stab = 0.001)"},{"path":"https://edahelsinki.github.io/slise/reference/limited_logit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes the logits from probabilities — limited_logit","text":"p probability (vector) stab limit p [stab, 1-stab] numerical stability","code":""},{"path":"https://edahelsinki.github.io/slise/reference/limited_logit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes the logits from probabilities — limited_logit","text":"log(p / (1 - p))","code":""},{"path":"https://edahelsinki.github.io/slise/reference/log_approximation_ratio.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Logarithm of the approximation ratio\n(logarithms are used for numerically stable calculations)\nSee Theorem 3 from the paper for more details — log_approximation_ratio","title":"Calculate the Logarithm of the approximation ratio\n(logarithms are used for numerically stable calculations)\nSee Theorem 3 from the paper for more details — log_approximation_ratio","text":"Calculate Logarithm approximation ratio (logarithms used numerically stable calculations) See Theorem 3 paper details","code":""},{"path":"https://edahelsinki.github.io/slise/reference/log_approximation_ratio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Logarithm of the approximation ratio\n(logarithms are used for numerically stable calculations)\nSee Theorem 3 from the paper for more details — log_approximation_ratio","text":"","code":"log_approximation_ratio(residuals2, epsilon2, beta1, beta2, weight = NULL)"},{"path":"https://edahelsinki.github.io/slise/reference/log_approximation_ratio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Logarithm of the approximation ratio\n(logarithms are used for numerically stable calculations)\nSee Theorem 3 from the paper for more details — log_approximation_ratio","text":"residuals2 squared residuals epsilon2 squared error tolerance beta1 current sigmoid steepness beta2 next sigmoid steepness weight weight vector (default: NULL)","code":""},{"path":"https://edahelsinki.github.io/slise/reference/log_approximation_ratio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the Logarithm of the approximation ratio\n(logarithms are used for numerically stable calculations)\nSee Theorem 3 from the paper for more details — log_approximation_ratio","text":"log(approximation_ratio)","code":""},{"path":"https://edahelsinki.github.io/slise/reference/log_sigmoid.html","id":null,"dir":"Reference","previous_headings":"","what":"log-sigmoid function — log_sigmoid","title":"log-sigmoid function — log_sigmoid","text":"log-sigmoid function","code":""},{"path":"https://edahelsinki.github.io/slise/reference/log_sigmoid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"log-sigmoid function — log_sigmoid","text":"","code":"log_sigmoid(x)"},{"path":"https://edahelsinki.github.io/slise/reference/log_sigmoid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"log-sigmoid function — log_sigmoid","text":"x vector real values","code":""},{"path":"https://edahelsinki.github.io/slise/reference/log_sigmoid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"log-sigmoid function — log_sigmoid","text":"log(sigmoid(x))","code":""},{"path":"https://edahelsinki.github.io/slise/reference/log_sum.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes log(sum(exp(x))) in a numerically robust way. — log_sum","title":"Computes log(sum(exp(x))) in a numerically robust way. — log_sum","text":"Computes log(sum(exp(x))) numerically robust way.","code":""},{"path":"https://edahelsinki.github.io/slise/reference/log_sum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes log(sum(exp(x))) in a numerically robust way. — log_sum","text":"","code":"log_sum(x)"},{"path":"https://edahelsinki.github.io/slise/reference/log_sum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes log(sum(exp(x))) in a numerically robust way. — log_sum","text":"x vector length n","code":""},{"path":"https://edahelsinki.github.io/slise/reference/log_sum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes log(sum(exp(x))) in a numerically robust way. — log_sum","text":"log(sum(exp(x))).","code":""},{"path":"https://edahelsinki.github.io/slise/reference/log_sum_special.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes log(sum(exp(x) * y)),\nor log(sum(exp(x))) if all(y == 0),\nin a numerically robust way. — log_sum_special","title":"Computes log(sum(exp(x) * y)),\nor log(sum(exp(x))) if all(y == 0),\nin a numerically robust way. — log_sum_special","text":"Computes log(sum(exp(x) * y)), log(sum(exp(x))) (y == 0), numerically robust way.","code":""},{"path":"https://edahelsinki.github.io/slise/reference/log_sum_special.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes log(sum(exp(x) * y)),\nor log(sum(exp(x))) if all(y == 0),\nin a numerically robust way. — log_sum_special","text":"","code":"log_sum_special(x, y)"},{"path":"https://edahelsinki.github.io/slise/reference/log_sum_special.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes log(sum(exp(x) * y)),\nor log(sum(exp(x))) if all(y == 0),\nin a numerically robust way. — log_sum_special","text":"x vector length n y multiplier","code":""},{"path":"https://edahelsinki.github.io/slise/reference/log_sum_special.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes log(sum(exp(x) * y)),\nor log(sum(exp(x))) if all(y == 0),\nin a numerically robust way. — log_sum_special","text":"log(sum(exp(x))).","code":""},{"path":"https://edahelsinki.github.io/slise/reference/loss_sharp.html","id":null,"dir":"Reference","previous_headings":"","what":"Sharp Loss Function\nExact loss function without gradients — loss_sharp","title":"Sharp Loss Function\nExact loss function without gradients — loss_sharp","text":"Sharp Loss Function Exact loss function without gradients","code":""},{"path":"https://edahelsinki.github.io/slise/reference/loss_sharp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sharp Loss Function\nExact loss function without gradients — loss_sharp","text":"","code":"loss_sharp(alpha, X, Y, epsilon, lambda1 = 0, lambda2 = 0, weight = NULL)"},{"path":"https://edahelsinki.github.io/slise/reference/loss_sharp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sharp Loss Function\nExact loss function without gradients — loss_sharp","text":"alpha vector calculate loss X data matrix Y response vector epsilon acceptable error lambda1 L1 regulariser (default: 0) lambda2 L2 regulariser (default: 0) weight weight vector (default: NULL)","code":""},{"path":"https://edahelsinki.github.io/slise/reference/loss_sharp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sharp Loss Function\nExact loss function without gradients — loss_sharp","text":"loss value","code":""},{"path":"https://edahelsinki.github.io/slise/reference/loss_sharp_res.html","id":null,"dir":"Reference","previous_headings":"","what":"Sharp Loss Function\nExact loss function without gradients for when the residuals are already calculated — loss_sharp_res","title":"Sharp Loss Function\nExact loss function without gradients for when the residuals are already calculated — loss_sharp_res","text":"Sharp Loss Function Exact loss function without gradients residuals already calculated","code":""},{"path":"https://edahelsinki.github.io/slise/reference/loss_sharp_res.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sharp Loss Function\nExact loss function without gradients for when the residuals are already calculated — loss_sharp_res","text":"","code":"loss_sharp_res(   alpha,   residuals2,   epsilon2,   lambda1 = 0,   lambda2 = 0,   weight = NULL )"},{"path":"https://edahelsinki.github.io/slise/reference/loss_sharp_res.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sharp Loss Function\nExact loss function without gradients for when the residuals are already calculated — loss_sharp_res","text":"alpha vector calculate loss residuals2 squared error vector: (X %*% alpha - Y)^2 epsilon2 squared acceptable error lambda1 L1 regulariser (default: 0) lambda2 L2 regulariser (default: 0) weight weight vector (default: NULL)","code":""},{"path":"https://edahelsinki.github.io/slise/reference/loss_sharp_res.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sharp Loss Function\nExact loss function without gradients for when the residuals are already calculated — loss_sharp_res","text":"loss value","code":""},{"path":"https://edahelsinki.github.io/slise/reference/loss_smooth.html","id":null,"dir":"Reference","previous_headings":"","what":"Smooth Loss\nA loss function for when you want gradients — loss_smooth","title":"Smooth Loss\nA loss function for when you want gradients — loss_smooth","text":"Smooth Loss loss function want gradients","code":""},{"path":"https://edahelsinki.github.io/slise/reference/loss_smooth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Smooth Loss\nA loss function for when you want gradients — loss_smooth","text":"","code":"loss_smooth(   alpha,   X,   Y,   epsilon,   beta,   lambda1 = 0,   lambda2 = 0,   weight = NULL )"},{"path":"https://edahelsinki.github.io/slise/reference/loss_smooth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Smooth Loss\nA loss function for when you want gradients — loss_smooth","text":"alpha vector calculate loss X data matrix Y response vector epsilon acceptable error beta steepness sigmoid lambda1 L1 regulariser (default: 0) lambda2 L2 regulariser (default: 0) weight weight vector (default: NULL)","code":""},{"path":"https://edahelsinki.github.io/slise/reference/loss_smooth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Smooth Loss\nA loss function for when you want gradients — loss_smooth","text":"loss value","code":""},{"path":"https://edahelsinki.github.io/slise/reference/loss_smooth_grad.html","id":null,"dir":"Reference","previous_headings":"","what":"Smooth Loss Gradient\nGradient for the smooth loss function — loss_smooth_grad","title":"Smooth Loss Gradient\nGradient for the smooth loss function — loss_smooth_grad","text":"Smooth Loss Gradient Gradient smooth loss function","code":""},{"path":"https://edahelsinki.github.io/slise/reference/loss_smooth_grad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Smooth Loss Gradient\nGradient for the smooth loss function — loss_smooth_grad","text":"","code":"loss_smooth_grad(   alpha,   X,   Y,   epsilon,   beta,   lambda1 = 0,   lambda2 = 0,   weight = NULL )"},{"path":"https://edahelsinki.github.io/slise/reference/loss_smooth_grad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Smooth Loss Gradient\nGradient for the smooth loss function — loss_smooth_grad","text":"alpha vector calculate loss-gradient X data matrix Y response vector epsilon acceptable error beta steepness sigmoid lambda1 L1 regulariser (default: 0) lambda2 L2 regulariser (default: 0) weight weight vector (default: NULL)","code":""},{"path":"https://edahelsinki.github.io/slise/reference/loss_smooth_grad.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Smooth Loss Gradient\nGradient for the smooth loss function — loss_smooth_grad","text":"gradients alpha","code":""},{"path":"https://edahelsinki.github.io/slise/reference/loss_smooth_res.html","id":null,"dir":"Reference","previous_headings":"","what":"Smooth Loss\nA loss function for when you want gradients and the residuals are already calculated — loss_smooth_res","title":"Smooth Loss\nA loss function for when you want gradients and the residuals are already calculated — loss_smooth_res","text":"Smooth Loss loss function want gradients residuals already calculated","code":""},{"path":"https://edahelsinki.github.io/slise/reference/loss_smooth_res.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Smooth Loss\nA loss function for when you want gradients and the residuals are already calculated — loss_smooth_res","text":"","code":"loss_smooth_res(   alpha,   residuals2,   epsilon2,   beta,   lambda1 = 0,   lambda2 = 0,   weight = NULL )"},{"path":"https://edahelsinki.github.io/slise/reference/loss_smooth_res.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Smooth Loss\nA loss function for when you want gradients and the residuals are already calculated — loss_smooth_res","text":"alpha vector calculate loss residuals2 Vector squared residuals epsilon2 squared acceptable error beta steepness sigmoid lambda1 L1 regulariser (default: 0) lambda2 L2 regulariser (default: 0) weight weight vector (default: NULL)","code":""},{"path":"https://edahelsinki.github.io/slise/reference/loss_smooth_res.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Smooth Loss\nA loss function for when you want gradients and the residuals are already calculated — loss_smooth_res","text":"loss value","code":""},{"path":"https://edahelsinki.github.io/slise/reference/matching_epsilon.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the matching *epsilon — matching_epsilon","title":"Find the matching *epsilon — matching_epsilon","text":"Find matching *epsilon","code":""},{"path":"https://edahelsinki.github.io/slise/reference/matching_epsilon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the matching *epsilon — matching_epsilon","text":"","code":"matching_epsilon(residuals2, epsilon2, beta, weight = NULL)"},{"path":"https://edahelsinki.github.io/slise/reference/matching_epsilon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the matching *epsilon — matching_epsilon","text":"residuals2 squared residuals epsilon2 squared error tolerance beta sigmoid steepness weight weight vector (default: NULL)","code":""},{"path":"https://edahelsinki.github.io/slise/reference/matching_epsilon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the matching *epsilon — matching_epsilon","text":"*epsilon","code":""},{"path":"https://edahelsinki.github.io/slise/reference/next_beta.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the next beta according to:\n  ¤ approximation_ratio(alpha, beta_old, beta_new) == max_approx\n  ¤ beta_new >= beta_old + min_increase\n  ¤ beta_new <= beta_max — next_beta","title":"Find the next beta according to:\n  ¤ approximation_ratio(alpha, beta_old, beta_new) == max_approx\n  ¤ beta_new >= beta_old + min_increase\n  ¤ beta_new <= beta_max — next_beta","text":"Find next beta according :   ¤ approximation_ratio(alpha, beta_old, beta_new) == max_approx   ¤ beta_new >= beta_old + min_increase   ¤ beta_new <= beta_max","code":""},{"path":"https://edahelsinki.github.io/slise/reference/next_beta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the next beta according to:\n  ¤ approximation_ratio(alpha, beta_old, beta_new) == max_approx\n  ¤ beta_new >= beta_old + min_increase\n  ¤ beta_new <= beta_max — next_beta","text":"","code":"next_beta(   residuals2,   epsilon2,   beta = 0,   weight = NULL,   beta_max = 20/epsilon2,   log_max_approx = log(1.15),   beta_min_increase = (beta_max + beta) * 5e-04 )"},{"path":"https://edahelsinki.github.io/slise/reference/next_beta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the next beta according to:\n  ¤ approximation_ratio(alpha, beta_old, beta_new) == max_approx\n  ¤ beta_new >= beta_old + min_increase\n  ¤ beta_new <= beta_max — next_beta","text":"residuals2 squared residuals epsilon2 squared error tolerance beta current sigmoid steepness weight weight vector (default: NULL) beta_max max sigmoid steepnsess log_max_approx logarithm approximation ratio target increasing beta beta_min_increase minimum beta step","code":""},{"path":"https://edahelsinki.github.io/slise/reference/next_beta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the next beta according to:\n  ¤ approximation_ratio(alpha, beta_old, beta_new) == max_approx\n  ¤ beta_new >= beta_old + min_increase\n  ¤ beta_new <= beta_max — next_beta","text":"beta_new","code":""},{"path":"https://edahelsinki.github.io/slise/reference/owlqn_c.html","id":null,"dir":"Reference","previous_headings":"","what":"OWL-QN for optimising loss_smooth\nCpp implementation — owlqn_c","title":"OWL-QN for optimising loss_smooth\nCpp implementation — owlqn_c","text":"OWL-QN optimising loss_smooth Cpp implementation","code":""},{"path":"https://edahelsinki.github.io/slise/reference/owlqn_c.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OWL-QN for optimising loss_smooth\nCpp implementation — owlqn_c","text":"","code":"owlqn_c(alpha, dc, lambda1 = 0, max_iterations = 300, ..., invisible = TRUE)"},{"path":"https://edahelsinki.github.io/slise/reference/owlqn_c.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"OWL-QN for optimising loss_smooth\nCpp implementation — owlqn_c","text":"alpha linear model optimise dc DataContainer containing data parameters lambda1 L1 coefficient (default: 0) max_iterations number OWL-QN iterations (default: 300) ... parameters OWL-QN invisible terminal output (default: TRUE)","code":""},{"path":"https://edahelsinki.github.io/slise/reference/owlqn_c.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"OWL-QN for optimising loss_smooth\nCpp implementation — owlqn_c","text":"lbfgs object","code":""},{"path":"https://edahelsinki.github.io/slise/reference/owlqn_r.html","id":null,"dir":"Reference","previous_headings":"","what":"OWL-QN for optimising loss_smooth\nR implementation — owlqn_r","title":"OWL-QN for optimising loss_smooth\nR implementation — owlqn_r","text":"OWL-QN optimising loss_smooth R implementation","code":""},{"path":"https://edahelsinki.github.io/slise/reference/owlqn_r.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OWL-QN for optimising loss_smooth\nR implementation — owlqn_r","text":"","code":"owlqn_r(   alpha,   X,   Y,   epsilon,   beta,   lambda1 = 0,   lambda2 = 0,   weight = NULL,   max_iterations = 300,   ...,   invisible = TRUE )"},{"path":"https://edahelsinki.github.io/slise/reference/owlqn_r.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"OWL-QN for optimising loss_smooth\nR implementation — owlqn_r","text":"alpha linear model optimise X data matrix Y response vector epsilon error tolerance beta sigmoid steepness lambda1 L1 coefficient (default: 0) lambda2 L1 coefficient(default: 0) weight weight vector (default: NULL) max_iterations number OWL-QN iterations (default: 300) ... parameters OWL-QN invisible terminal output (default: TRUE)","code":""},{"path":"https://edahelsinki.github.io/slise/reference/owlqn_r.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"OWL-QN for optimising loss_smooth\nR implementation — owlqn_r","text":"lbfgs object","code":""},{"path":"https://edahelsinki.github.io/slise/reference/plot.slise.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the robust regression or explanation from slise — plot.slise","title":"Plot the robust regression or explanation from slise — plot.slise","text":"Plot robust regression explanation slise","code":""},{"path":"https://edahelsinki.github.io/slise/reference/plot.slise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the robust regression or explanation from slise — plot.slise","text":"","code":"# S3 method for slise plot(x, type = NULL, title = NULL, ...)"},{"path":"https://edahelsinki.github.io/slise/reference/plot.slise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the robust regression or explanation from slise — plot.slise","text":"x slise object type type plot (\"2D\", \"bar\", \"distribution\", \"mnist\", \"prediction\", \"wordcloud\") title title plot (may include `%s`, replaced prediction) ... Arguments passed plot.slise_2d, plot.slise_bar, plot.slise_distribution, plot.slise_mnist, plot.slise_prediction, plot.slise_wordcloud labels axis labels (default: c(\"X\", \"Y\") c(\"x\", \"f(x)\")) partial raw ggplot2 objects returned instead directly plotting (default: FALSE) size size plot elements (default: 2) signif number significant digits display (default: 3) width width image (width * height == ncol(X)) height height image (width * height == ncol(X)) plots number plots split explanation (default: 1) treshold Treshold ignored value (default: 1e-8) local display words relevant explained item (default: TRUE)","code":""},{"path":"https://edahelsinki.github.io/slise/reference/plot.slise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the robust regression or explanation from slise — plot.slise","text":"plot ggplot2 objects","code":""},{"path":"https://edahelsinki.github.io/slise/reference/plot.slise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the robust regression or explanation from slise — plot.slise","text":"","code":"X <- matrix(rnorm(30), 30, 1) Y <- runif(30, 0, 1) plot(slise.fit(X, Y, epsilon = 0.1)) #> Warning: The `<scale>` argument of `guides()` cannot be `FALSE`. Use \"none\" instead as #> of ggplot2 3.3.4. #> ℹ The deprecated feature was likely used in the slise package. #>   Please report the issue to the authors."},{"path":"https://edahelsinki.github.io/slise/reference/plot.slise_2d.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the robust regression or explanation from slise in 2D — plot.slise_2d","title":"Plot the robust regression or explanation from slise in 2D — plot.slise_2d","text":"Plot robust regression explanation slise 2D","code":""},{"path":"https://edahelsinki.github.io/slise/reference/plot.slise_2d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the robust regression or explanation from slise in 2D — plot.slise_2d","text":"","code":"# S3 method for slise_2d plot(slise, title = NULL, labels = NULL, partial = FALSE, size = 2, ...)"},{"path":"https://edahelsinki.github.io/slise/reference/plot.slise_2d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the robust regression or explanation from slise in 2D — plot.slise_2d","text":"slise slise object title title plot (may include `%s`, replaced prediction) labels axis labels (default: c(\"X\", \"Y\") c(\"x\", \"f(x)\")) partial raw ggplot2 objects returned instead directly plotting (default: FALSE) size size plot elements (default: 2) ... Ignored parameters","code":""},{"path":"https://edahelsinki.github.io/slise/reference/plot.slise_2d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the robust regression or explanation from slise in 2D — plot.slise_2d","text":"ggplot object plot","code":""},{"path":"https://edahelsinki.github.io/slise/reference/plot.slise_bar.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the robust regression or explanation from slise as bar plots — plot.slise_bar","title":"Plot the robust regression or explanation from slise as bar plots — plot.slise_bar","text":"Plot robust regression explanation slise bar plots","code":""},{"path":"https://edahelsinki.github.io/slise/reference/plot.slise_bar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the robust regression or explanation from slise as bar plots — plot.slise_bar","text":"","code":"# S3 method for slise_bar plot(   slise,   title = NULL,   labels = c(\"Low\", \"High\"),   partial = FALSE,   size = 8,   ... )"},{"path":"https://edahelsinki.github.io/slise/reference/plot.slise_bar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the robust regression or explanation from slise as bar plots — plot.slise_bar","text":"slise slise object title title plot (may include `%s`, replaced prediction) labels class labels (vector two strings: c(y_low, y_high), default: c(\"Low\", \"High\")) partial raw ggplot2 objects returned instead directly plotting (default: FALSE) size size segments (default: 8) ... Ignored parameters","code":""},{"path":"https://edahelsinki.github.io/slise/reference/plot.slise_bar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the robust regression or explanation from slise as bar plots — plot.slise_bar","text":"List ggplot objects plot","code":""},{"path":"https://edahelsinki.github.io/slise/reference/plot.slise_distribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the robust regression or explanation from slise with distributions — plot.slise_distribution","title":"Plot the robust regression or explanation from slise with distributions — plot.slise_distribution","text":"Plot robust regression explanation slise distributions","code":""},{"path":"https://edahelsinki.github.io/slise/reference/plot.slise_distribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the robust regression or explanation from slise with distributions — plot.slise_distribution","text":"","code":"# S3 method for slise_distribution plot(   slise,   title = NULL,   labels = c(\"Low\", \"High\"),   partial = FALSE,   signif = 3,   ... )"},{"path":"https://edahelsinki.github.io/slise/reference/plot.slise_distribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the robust regression or explanation from slise with distributions — plot.slise_distribution","text":"slise slise object title title plot (may include `%s`, replaced prediction) labels class labels (vector two strings: c(y_low, y_high), default: c(\"Low\", \"High\")) partial raw ggplot2 objects returned instead directly plotting (default: FALSE) signif number significant digits display (default: 3) ... Ignored parameters","code":""},{"path":"https://edahelsinki.github.io/slise/reference/plot.slise_distribution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the robust regression or explanation from slise with distributions — plot.slise_distribution","text":"List ggplot objects plot","code":""},{"path":"https://edahelsinki.github.io/slise/reference/plot.slise_mnist.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the robust regression or explanation from slise as an image — plot.slise_mnist","title":"Plot the robust regression or explanation from slise as an image — plot.slise_mnist","text":"Plot robust regression explanation slise image","code":""},{"path":"https://edahelsinki.github.io/slise/reference/plot.slise_mnist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the robust regression or explanation from slise as an image — plot.slise_mnist","text":"","code":"# S3 method for slise_mnist plot(   slise,   title = NULL,   labels = c(\"Low\", \"High\"),   partial = FALSE,   width = floor(sqrt(ncol(slise$X))),   height = width,   plots = 1,   enhance_colours = TRUE,   ...,   breaks = NULL )"},{"path":"https://edahelsinki.github.io/slise/reference/plot.slise_mnist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the robust regression or explanation from slise as an image — plot.slise_mnist","text":"slise slise object title title plot (may include `%s`, replaced prediction) labels class labels (vector two strings: c(y_low, y_high), default: c(\"Low\", \"High\")) partial raw ggplot2 objects returned instead directly plotting (default: FALSE) width width image (width * height == ncol(X)) height height image (width * height == ncol(X)) plots number plots split explanation (default: 1) enhance_colours Increse saturation explanation (default: TRUE) ... Ignored parameters breaks Breaks countours, see `ggplot2::stat_contour` (default: NULL)","code":""},{"path":"https://edahelsinki.github.io/slise/reference/plot.slise_mnist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the robust regression or explanation from slise as an image — plot.slise_mnist","text":"ggplot object(s) plot","code":""},{"path":"https://edahelsinki.github.io/slise/reference/plot.slise_prediction.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the robust regression or explanation from slise based on predictions — plot.slise_prediction","title":"Plot the robust regression or explanation from slise based on predictions — plot.slise_prediction","text":"Plot robust regression explanation slise based predictions","code":""},{"path":"https://edahelsinki.github.io/slise/reference/plot.slise_prediction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the robust regression or explanation from slise based on predictions — plot.slise_prediction","text":"","code":"# S3 method for slise_prediction plot(   slise,   title = NULL,   labels = c(\"Response\", \"Count\"),   partial = FALSE,   approximation = TRUE,   signif = 3,   ... )"},{"path":"https://edahelsinki.github.io/slise/reference/plot.slise_prediction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the robust regression or explanation from slise based on predictions — plot.slise_prediction","text":"slise slise object title title plot (may include `%s`, replaced prediction) labels axis labels (default: c(\"Response\", \"Count\")) partial raw ggplot2 objects returned instead directly plotting (default: FALSE) approximation approximation density added (default: TRUE) signif number significant digits display (default: 3) ... Ignored parameters","code":""},{"path":"https://edahelsinki.github.io/slise/reference/plot.slise_prediction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the robust regression or explanation from slise based on predictions — plot.slise_prediction","text":"ggplot object plot","code":""},{"path":"https://edahelsinki.github.io/slise/reference/plot.slise_wordcloud.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the robust regression or explanation from slise as a wordcloud — plot.slise_wordcloud","title":"Plot the robust regression or explanation from slise as a wordcloud — plot.slise_wordcloud","text":"Plot robust regression explanation slise wordcloud","code":""},{"path":"https://edahelsinki.github.io/slise/reference/plot.slise_wordcloud.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the robust regression or explanation from slise as a wordcloud — plot.slise_wordcloud","text":"","code":"# S3 method for slise_wordcloud plot(   slise,   title = NULL,   labels = c(\"Low\", \"High\"),   treshold = 1e-08,   local = TRUE,   ... )"},{"path":"https://edahelsinki.github.io/slise/reference/plot.slise_wordcloud.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the robust regression or explanation from slise as a wordcloud — plot.slise_wordcloud","text":"slise slise object title title plot (may include `%s`, replaced prediction) labels class labels (vector two strings: c(y_low, y_high), default: c(\"Low\", \"High\")) treshold Treshold ignored value (default: 1e-8) local display words relevant explained item (default: TRUE) ... Ignored parameters","code":""},{"path":"https://edahelsinki.github.io/slise/reference/plot.slise_wordcloud.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the robust regression or explanation from slise as a wordcloud — plot.slise_wordcloud","text":"plot","code":""},{"path":"https://edahelsinki.github.io/slise/reference/predict.slise.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict with a SLISE — predict.slise","title":"Predict with a SLISE — predict.slise","text":"Predict SLISE","code":""},{"path":"https://edahelsinki.github.io/slise/reference/predict.slise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict with a SLISE — predict.slise","text":"","code":"# S3 method for slise predict(object, newdata = NULL, ..., logit = FALSE)"},{"path":"https://edahelsinki.github.io/slise/reference/predict.slise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict with a SLISE — predict.slise","text":"object SLISE object newdata data matrix ... ignored additional parameters logit return result logit space logit applied Y (default: FALSE)","code":""},{"path":"https://edahelsinki.github.io/slise/reference/predict.slise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict with a SLISE — predict.slise","text":"prediction vector","code":""},{"path":"https://edahelsinki.github.io/slise/reference/print.slise.html","id":null,"dir":"Reference","previous_headings":"","what":"Print the robust regression or explanation from slise — print.slise","title":"Print the robust regression or explanation from slise — print.slise","text":"Print robust regression explanation slise","code":""},{"path":"https://edahelsinki.github.io/slise/reference/print.slise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print the robust regression or explanation from slise — print.slise","text":"","code":"# S3 method for slise print(x, num_vars = 10, labels = NULL, ...)"},{"path":"https://edahelsinki.github.io/slise/reference/print.slise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print the robust regression or explanation from slise — print.slise","text":"x slise object num_vars Minimum number variables show without filtering (default: 10) labels Name y class labels ... Ignored additional parameters","code":""},{"path":"https://edahelsinki.github.io/slise/reference/print.slise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print the robust regression or explanation from slise — print.slise","text":"invisible(x)","code":""},{"path":"https://edahelsinki.github.io/slise/reference/print.slise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print the robust regression or explanation from slise — print.slise","text":"","code":"X <- matrix(rnorm(30), 15, 2) Y <- runif(15, 0, 1) print(slise.fit(X, Y, epsilon = 0.1)) #> SLISE Regression: #>    Intercept            2            1  #>  0.806228999  0.053344003 -0.008859701  #> Subset size:    0.47 #> Loss:          -0.07 #> Epsilon:        0.10"},{"path":"https://edahelsinki.github.io/slise/reference/scale_identity.html","id":null,"dir":"Reference","previous_headings":"","what":"A variant of `scale` that only adds the attributes — scale_identity","title":"A variant of `scale` that only adds the attributes — scale_identity","text":"variant `scale` adds attributes","code":""},{"path":"https://edahelsinki.github.io/slise/reference/scale_identity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A variant of `scale` that only adds the attributes — scale_identity","text":"","code":"scale_identity(x)"},{"path":"https://edahelsinki.github.io/slise/reference/scale_identity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A variant of `scale` that only adds the attributes — scale_identity","text":"x vector () scale","code":""},{"path":"https://edahelsinki.github.io/slise/reference/scale_identity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A variant of `scale` that only adds the attributes — scale_identity","text":"x (attributes \"scaled:center\" \"scaled:scale\")","code":""},{"path":"https://edahelsinki.github.io/slise/reference/scale_robust.html","id":null,"dir":"Reference","previous_headings":"","what":"Robust Scale\nA variant of 'scale' that is based on median and mad (instead of mean and sd).\nIt can handle zero variance without producing nan:s. — scale_robust","title":"Robust Scale\nA variant of 'scale' that is based on median and mad (instead of mean and sd).\nIt can handle zero variance without producing nan:s. — scale_robust","text":"Robust Scale variant 'scale' based median mad (instead mean sd). can handle zero variance without producing nan:s.","code":""},{"path":"https://edahelsinki.github.io/slise/reference/scale_robust.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Robust Scale\nA variant of 'scale' that is based on median and mad (instead of mean and sd).\nIt can handle zero variance without producing nan:s. — scale_robust","text":"","code":"scale_robust(x, th = .Machine$double.eps)"},{"path":"https://edahelsinki.github.io/slise/reference/scale_robust.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Robust Scale\nA variant of 'scale' that is based on median and mad (instead of mean and sd).\nIt can handle zero variance without producing nan:s. — scale_robust","text":"x vector/matrix normalise th threshold scale zero","code":""},{"path":"https://edahelsinki.github.io/slise/reference/scale_robust.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Robust Scale\nA variant of 'scale' that is based on median and mad (instead of mean and sd).\nIt can handle zero variance without producing nan:s. — scale_robust","text":"scaled_x (attributes \"scaled:center\" \"scaled:scale\")","code":""},{"path":"https://edahelsinki.github.io/slise/reference/sigmoid.html","id":null,"dir":"Reference","previous_headings":"","what":"sigmoid function — sigmoid","title":"sigmoid function — sigmoid","text":"sigmoid function","code":""},{"path":"https://edahelsinki.github.io/slise/reference/sigmoid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sigmoid function — sigmoid","text":"","code":"sigmoid(x)"},{"path":"https://edahelsinki.github.io/slise/reference/sigmoid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sigmoid function — sigmoid","text":"x vector real values","code":""},{"path":"https://edahelsinki.github.io/slise/reference/sigmoid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sigmoid function — sigmoid","text":"sigmoid(x)","code":""},{"path":"https://edahelsinki.github.io/slise/reference/simple_pca.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the PCA rotation matrix\nThe implementation is based on stats::prcomp.\nAssumes the data has already been centered and scaled (if that is desired). — simple_pca","title":"Calculate the PCA rotation matrix\nThe implementation is based on stats::prcomp.\nAssumes the data has already been centered and scaled (if that is desired). — simple_pca","text":"Calculate PCA rotation matrix implementation based stats::prcomp. Assumes data already centered scaled (desired).","code":""},{"path":"https://edahelsinki.github.io/slise/reference/simple_pca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the PCA rotation matrix\nThe implementation is based on stats::prcomp.\nAssumes the data has already been centered and scaled (if that is desired). — simple_pca","text":"","code":"simple_pca(X, dimensions, tolerance = 1e-10)"},{"path":"https://edahelsinki.github.io/slise/reference/simple_pca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the PCA rotation matrix\nThe implementation is based on stats::prcomp.\nAssumes the data has already been centered and scaled (if that is desired). — simple_pca","text":"X matrix reduce dimensions number dimensions PCA tolerance remove components variance less tolerance","code":""},{"path":"https://edahelsinki.github.io/slise/reference/simple_pca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the PCA rotation matrix\nThe implementation is based on stats::prcomp.\nAssumes the data has already been centered and scaled (if that is desired). — simple_pca","text":"pca rotation matrix","code":""},{"path":"https://edahelsinki.github.io/slise/reference/slise-package.html","id":null,"dir":"Reference","previous_headings":"","what":"slise: Sparse Linear Subset Explanations — slise-package","title":"slise: Sparse Linear Subset Explanations — slise-package","text":"implementation SLISE algorithm (robust regression explaining outcomes black box models).","code":""},{"path":[]},{"path":"https://edahelsinki.github.io/slise/reference/slise-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"slise: Sparse Linear Subset Explanations — slise-package","text":"Maintainer: Anton Björklund anton.bjorklund@helsinki.fi (ORCID) Authors: Andreas Henelius (ORCID) Kai Puolamäki (ORCID)","code":""},{"path":"https://edahelsinki.github.io/slise/reference/slise.explain.html","id":null,"dir":"Reference","previous_headings":"","what":"SLISE for explaining Black box models. — slise.explain","title":"SLISE for explaining Black box models. — slise.explain","text":"highly recommended normalise data, either using SLISE setting normalise = TRUE.","code":""},{"path":"https://edahelsinki.github.io/slise/reference/slise.explain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SLISE for explaining Black box models. — slise.explain","text":"","code":"slise.explain(   X,   Y,   epsilon,   x,   y = NULL,   lambda1 = 0,   lambda2 = 0,   weight = NULL,   normalise = FALSE,   logit = FALSE,   initialisation = slise_initialisation_candidates,   ... )"},{"path":"https://edahelsinki.github.io/slise/reference/slise.explain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SLISE for explaining Black box models. — slise.explain","text":"X Matrix independent variables Y Vector dependent variable epsilon Error tolerance x sample explained (index y null) y prediction explained (default: NULL) lambda1 L1 regularisation coefficient (default: 0) lambda2 L2 regularisation coefficient (default: 0) weight Optional weight vector (default: NULL) normalise Preprocess X Y scaling, note epsilon scaled (default: FALSE) logit Logit transform Y probabilities real values (default: FALSE) initialisation function gives initial alpha beta, list containing initial alpha beta (default: slise_initialisation_candidates) ... Arguments passed graduated_optimisation, slise_initialisation_candidates beta_max Stopping sigmoid steepness (default: 20 / epsilon^2) max_approx Approximation ratio selecting next beta (default: 1.15) max_iterations Maximum number OWL-QN iterations (default: 300) debug debug statement printed iteration (default: FALSE) num_init number initial subsets generate (default: 500) beta_max_init maximum sigmoid steepness initialisation pca_treshold maximum number columns without using PCA (default: 10)","code":""},{"path":"https://edahelsinki.github.io/slise/reference/slise.explain.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SLISE for explaining Black box models. — slise.explain","text":"slise.object","code":""},{"path":"https://edahelsinki.github.io/slise/reference/slise.explain.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SLISE for explaining Black box models. — slise.explain","text":"","code":"X <- matrix(rnorm(32), 8, 4) Y <- runif(8, 0, 1) expl <- slise.explain(X, Y, 0.1, 3, lambda1 = 0.01, logit = TRUE) plot(expl, \"bar\", labels = c(\"class 1\", \"class 2\"))"},{"path":"https://edahelsinki.github.io/slise/reference/slise.explain_comb.html","id":null,"dir":"Reference","previous_headings":"","what":"SLISE Black Box Explainer\nUse SLISE for explaining predictions made by a black box.\nBUT with sparsity from a combinatorial search rather than Lasso! — slise.explain_comb","title":"SLISE Black Box Explainer\nUse SLISE for explaining predictions made by a black box.\nBUT with sparsity from a combinatorial search rather than Lasso! — slise.explain_comb","text":"SLISE Black Box Explainer Use SLISE explaining predictions made black box. sparsity combinatorial search rather Lasso!","code":""},{"path":"https://edahelsinki.github.io/slise/reference/slise.explain_comb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SLISE Black Box Explainer\nUse SLISE for explaining predictions made by a black box.\nBUT with sparsity from a combinatorial search rather than Lasso! — slise.explain_comb","text":"","code":"slise.explain_comb(X, Y, epsilon, x, y = NULL, ..., variables = 4)"},{"path":"https://edahelsinki.github.io/slise/reference/slise.explain_comb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SLISE Black Box Explainer\nUse SLISE for explaining predictions made by a black box.\nBUT with sparsity from a combinatorial search rather than Lasso! — slise.explain_comb","text":"X matrix independent variables Y vector dependent variable epsilon error tolerance x sample explained (index y null) y prediction explained ... Arguments passed slise.explain lambda1 L1 regularisation coefficient (default: 0) lambda2 L2 regularisation coefficient (default: 0) weight Optional weight vector (default: NULL) normalise Preprocess X Y scaling, note epsilon scaled (default: FALSE) logit Logit transform Y probabilities real values (default: FALSE) initialisation function gives initial alpha beta, list containing initial alpha beta (default: slise_initialisation_candidates) variables number non-zero coefficients","code":""},{"path":"https://edahelsinki.github.io/slise/reference/slise.explain_comb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SLISE Black Box Explainer\nUse SLISE for explaining predictions made by a black box.\nBUT with sparsity from a combinatorial search rather than Lasso! — slise.explain_comb","text":"SLISE object","code":""},{"path":"https://edahelsinki.github.io/slise/reference/slise.explain_find.html","id":null,"dir":"Reference","previous_headings":"","what":"SLISE Black Box Explainer\nUse SLISE for explaining predictions made by a black box.\nBUT with a binary search for sparsity! — slise.explain_find","title":"SLISE Black Box Explainer\nUse SLISE for explaining predictions made by a black box.\nBUT with a binary search for sparsity! — slise.explain_find","text":"DEPRECATED: simple binary search, need separate function","code":""},{"path":"https://edahelsinki.github.io/slise/reference/slise.explain_find.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SLISE Black Box Explainer\nUse SLISE for explaining predictions made by a black box.\nBUT with a binary search for sparsity! — slise.explain_find","text":"","code":"slise.explain_find(   ...,   lambda1 = 5,   variables = 4,   iters = 10,   treshold = 1e-04 )"},{"path":"https://edahelsinki.github.io/slise/reference/slise.explain_find.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SLISE Black Box Explainer\nUse SLISE for explaining predictions made by a black box.\nBUT with a binary search for sparsity! — slise.explain_find","text":"... Arguments passed slise.explain X Matrix independent variables Y Vector dependent variable epsilon Error tolerance x sample explained (index y null) y prediction explained (default: NULL) lambda2 L2 regularisation coefficient (default: 0) weight Optional weight vector (default: NULL) normalise Preprocess X Y scaling, note epsilon scaled (default: FALSE) logit Logit transform Y probabilities real values (default: FALSE) initialisation function gives initial alpha beta, list containing initial alpha beta (default: slise_initialisation_candidates) lambda1 starting value search variables number non-zero coefficients iters number search iterations treshold treshold zero coefficient","code":""},{"path":"https://edahelsinki.github.io/slise/reference/slise.explain_find.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SLISE Black Box Explainer\nUse SLISE for explaining predictions made by a black box.\nBUT with a binary search for sparsity! — slise.explain_find","text":"SLISE object","code":""},{"path":"https://edahelsinki.github.io/slise/reference/slise.fit.html","id":null,"dir":"Reference","previous_headings":"","what":"SLISE for robust regression. — slise.fit","title":"SLISE for robust regression. — slise.fit","text":"highly recommended normalise data, either using SLISE setting normalise = TRUE.","code":""},{"path":"https://edahelsinki.github.io/slise/reference/slise.fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SLISE for robust regression. — slise.fit","text":"","code":"slise.fit(   X,   Y,   epsilon,   lambda1 = 0,   lambda2 = 0,   weight = NULL,   intercept = TRUE,   normalise = FALSE,   initialisation = slise_initialisation_candidates,   ... )"},{"path":"https://edahelsinki.github.io/slise/reference/slise.fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SLISE for robust regression. — slise.fit","text":"X Matrix independent variables Y Vector response variable epsilon Error tolerance lambda1 L1 regularisation coefficient (default: 0) lambda2 L2 regularisation coefficient (default: 0) weight Optional weight vector (default: NULL) intercept intercept added (default: TRUE) normalise Preprocess X Y scaling, note epsilon scaled (default: FALSE) initialisation Function gives initial alpha beta, list containing initial alpha beta (default: slise_initialisation_candidates) ... Arguments passed graduated_optimisation, slise_initialisation_candidates beta_max Stopping sigmoid steepness (default: 20 / epsilon^2) max_approx Approximation ratio selecting next beta (default: 1.15) max_iterations Maximum number OWL-QN iterations (default: 300) debug debug statement printed iteration (default: FALSE) num_init number initial subsets generate (default: 500) beta_max_init maximum sigmoid steepness initialisation pca_treshold maximum number columns without using PCA (default: 10)","code":""},{"path":"https://edahelsinki.github.io/slise/reference/slise.fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SLISE for robust regression. — slise.fit","text":"slise.object","code":""},{"path":"https://edahelsinki.github.io/slise/reference/slise.fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SLISE for robust regression. — slise.fit","text":"","code":"X <- matrix(rnorm(32), 8, 4) Y <- rnorm(8) model <- slise.fit(X, Y, (max(Y) - min(Y)) * 0.1) predicted <- predict(model, X)"},{"path":"https://edahelsinki.github.io/slise/reference/slise.formula.html","id":null,"dir":"Reference","previous_headings":"","what":"SLISE for robust regression (using a formula). — slise.formula","title":"SLISE for robust regression (using a formula). — slise.formula","text":"highly recommended normalise data, either using SLISE setting normalise = TRUE.","code":""},{"path":"https://edahelsinki.github.io/slise/reference/slise.formula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SLISE for robust regression (using a formula). — slise.formula","text":"","code":"slise.formula(   formula,   data,   epsilon,   lambda1 = 0,   lambda2 = 0,   weight = NULL,   normalise = FALSE,   initialisation = slise_initialisation_candidates,   ... )"},{"path":"https://edahelsinki.github.io/slise/reference/slise.formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SLISE for robust regression (using a formula). — slise.formula","text":"formula formula data data formula epsilon Error tolerance lambda1 L1 regularisation coefficient (default: 0) lambda2 L2 regularisation coefficient (default: 0) weight Optional weight vector (default: NULL) normalise Preprocess X Y scaling, note epsilon scaled (default: FALSE) initialisation Function gives initial alpha beta, list containing initial alpha beta (default: slise_initialisation_candidates) ... Arguments passed graduated_optimisation, slise_initialisation_candidates beta_max Stopping sigmoid steepness (default: 20 / epsilon^2) max_approx Approximation ratio selecting next beta (default: 1.15) max_iterations Maximum number OWL-QN iterations (default: 300) debug debug statement printed iteration (default: FALSE) num_init number initial subsets generate (default: 500) beta_max_init maximum sigmoid steepness initialisation pca_treshold maximum number columns without using PCA (default: 10)","code":""},{"path":"https://edahelsinki.github.io/slise/reference/slise.formula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SLISE for robust regression (using a formula). — slise.formula","text":"slise.object","code":""},{"path":"https://edahelsinki.github.io/slise/reference/slise.formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SLISE for robust regression (using a formula). — slise.formula","text":"","code":"data <- data.frame(y = rnorm(8), a = rnorm(8), b = rnorm(8)) model <- slise.formula(y ~ a * b + abs(a), data, 0.1, normalise = TRUE)"},{"path":"https://edahelsinki.github.io/slise/reference/slise.object.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a result object for SLISE that is similar to other regression method results — slise.object","title":"Create a result object for SLISE that is similar to other regression method results — slise.object","text":"Create result object SLISE similar regression method results","code":""},{"path":"https://edahelsinki.github.io/slise/reference/slise.object.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a result object for SLISE that is similar to other regression method results — slise.object","text":"","code":"slise.object(   alpha,   X,   Y,   epsilon,   lambda1 = 0,   lambda2 = 0,   weight = NULL,   intercept = FALSE,   logit = FALSE,   x = NULL,   y = NULL )"},{"path":"https://edahelsinki.github.io/slise/reference/slise.object.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a result object for SLISE that is similar to other regression method results — slise.object","text":"alpha linear model X data matrix Y response vector epsilon error tolerance lambda1 L1 regularisation coefficient (default: 0) lambda2 L2 regularisation coefficient (default: 0) weight weight vector (default: NULL) intercept model intercept (default: FALSE) logit target logit-transformed (default: FALSE) x explained item x (default: NULL) y explained item y (default: NULL)","code":""},{"path":"https://edahelsinki.github.io/slise/reference/slise.object.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a result object for SLISE that is similar to other regression method results — slise.object","text":"object SLISE results","code":""},{"path":"https://edahelsinki.github.io/slise/reference/slise.object_unnormalise.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn a `slise.object` result based on normalised data to a `slise.object` result with unnormalised data.\nThe normalised results are retained, but with a 'normalised_' prefix. — slise.object_unnormalise","title":"Turn a `slise.object` result based on normalised data to a `slise.object` result with unnormalised data.\nThe normalised results are retained, but with a 'normalised_' prefix. — slise.object_unnormalise","text":"Turn `slise.object` result based normalised data `slise.object` result unnormalised data. normalised results retained, 'normalised_' prefix.","code":""},{"path":"https://edahelsinki.github.io/slise/reference/slise.object_unnormalise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn a `slise.object` result based on normalised data to a `slise.object` result with unnormalised data.\nThe normalised results are retained, but with a 'normalised_' prefix. — slise.object_unnormalise","text":"","code":"slise.object_unnormalise(object, X, Y, x = NULL, y = NULL)"},{"path":"https://edahelsinki.github.io/slise/reference/slise.object_unnormalise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turn a `slise.object` result based on normalised data to a `slise.object` result with unnormalised data.\nThe normalised results are retained, but with a 'normalised_' prefix. — slise.object_unnormalise","text":"object output `slise.object` X unnormalised data matrix Y unnormalised response vector x explained item x (default: NULL) y explained item y (default: NULL)","code":""},{"path":"https://edahelsinki.github.io/slise/reference/slise.object_unnormalise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Turn a `slise.object` result based on normalised data to a `slise.object` result with unnormalised data.\nThe normalised results are retained, but with a 'normalised_' prefix. — slise.object_unnormalise","text":"object SLISE results","code":""},{"path":"https://edahelsinki.github.io/slise/reference/slise.preprocess.html","id":null,"dir":"Reference","previous_headings":"","what":"Preprocess the data as necessary before running SLISE — slise.preprocess","title":"Preprocess the data as necessary before running SLISE — slise.preprocess","text":"Preprocess data necessary running SLISE","code":""},{"path":"https://edahelsinki.github.io/slise/reference/slise.preprocess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocess the data as necessary before running SLISE — slise.preprocess","text":"","code":"slise.preprocess(   X,   Y,   epsilon,   x = NULL,   y = NULL,   lambda1 = 0,   lambda2 = 0,   weight = NULL,   intercept = FALSE,   normalise = FALSE,   logit = FALSE )"},{"path":"https://edahelsinki.github.io/slise/reference/slise.preprocess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocess the data as necessary before running SLISE — slise.preprocess","text":"X Matrix independent variables Y Vector target variable epsilon Error tolerance x sample explained (index y null) y prediction explained (default: NULL) lambda1 L1 regularisation coefficient (default: 0) lambda2 L2 regularisation coefficient (default: 0) weight Optional weight vector (default: NULL) intercept intercept added (default: TRUE) normalise Preprocess X Y scaling, note epsilon scaled (default: FALSE) logit Logit transform Y probabilities real values (default: FALSE)","code":""},{"path":"https://edahelsinki.github.io/slise/reference/slise.preprocess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preprocess the data as necessary before running SLISE — slise.preprocess","text":"list(X_orig, Y_orig, X, Y, x_orig, y_orig, x, y)","code":""},{"path":"https://edahelsinki.github.io/slise/reference/slise_initialisation_candidates.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialise the graduated optimisation by sampling candidates — slise_initialisation_candidates","title":"Initialise the graduated optimisation by sampling candidates — slise_initialisation_candidates","text":"procedure starts creating num_init subsets size d. subset linear model fitted model smallest loss selected.","code":""},{"path":"https://edahelsinki.github.io/slise/reference/slise_initialisation_candidates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialise the graduated optimisation by sampling candidates — slise_initialisation_candidates","text":"","code":"slise_initialisation_candidates(   X,   Y,   epsilon,   weight = NULL,   beta_max = 20/epsilon^2,   max_approx = 1.15,   num_init = 500,   beta_max_init = 2.5/epsilon^2,   pca_treshold = 10,   max_iterations = 300,   ... )"},{"path":"https://edahelsinki.github.io/slise/reference/slise_initialisation_candidates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialise the graduated optimisation by sampling candidates — slise_initialisation_candidates","text":"X data matrix Y response vector epsilon error tolerance weight weight vector (default: NULL) beta_max maximum sigmoid steepness (default: 20/epsilon^2) max_approx target approximation ratio (default: 1.15) num_init number initial subsets generate (default: 500) beta_max_init maximum sigmoid steepness initialisation pca_treshold maximum number columns without using PCA (default: 10) max_iterations ncol(X) huge, ols replaced optimisation (default:300) ... unused parameters","code":""},{"path":"https://edahelsinki.github.io/slise/reference/slise_initialisation_candidates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialise the graduated optimisation by sampling candidates — slise_initialisation_candidates","text":"list(alpha, beta)","code":""},{"path":"https://edahelsinki.github.io/slise/reference/slise_initialisation_candidates.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initialise the graduated optimisation by sampling candidates — slise_initialisation_candidates","text":"chance one subsets contains \"clean\" data :   $$ 1-(1-(1-noise_fraction)^d)^num_init $$ means high-dimensional data (large d) can cause issues, solved using PCA (allows sampling smaller subsets d).","code":""},{"path":"https://edahelsinki.github.io/slise/reference/slise_initialisation_candidates2.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialise the graduated optimisation by sampling candidates — slise_initialisation_candidates2","title":"Initialise the graduated optimisation by sampling candidates — slise_initialisation_candidates2","text":"procedure starts creating num_init subsets size d. subset linear model fitted model smallest loss selected.","code":""},{"path":"https://edahelsinki.github.io/slise/reference/slise_initialisation_candidates2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialise the graduated optimisation by sampling candidates — slise_initialisation_candidates2","text":"","code":"slise_initialisation_candidates2(   X,   Y,   epsilon,   weight = NULL,   beta_max = 20/epsilon^2,   max_approx = 1.15,   num_init = 500,   beta_max_init = 2.5/epsilon^2,   max_iterations = 300,   ... )"},{"path":"https://edahelsinki.github.io/slise/reference/slise_initialisation_candidates2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialise the graduated optimisation by sampling candidates — slise_initialisation_candidates2","text":"X data matrix Y response vector epsilon error tolerance weight weight vector (default: NULL) beta_max maximum sigmoid steepness (default: 20/epsilon^2) max_approx target approximation ratio (default: 1.15) num_init number initial subsets generate (default: 400) beta_max_init maximum sigmoid steepness initialisation max_iterations ncol(X) huge, ols replaced optimisation (default:300) ... unused parameters","code":""},{"path":"https://edahelsinki.github.io/slise/reference/slise_initialisation_candidates2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialise the graduated optimisation by sampling candidates — slise_initialisation_candidates2","text":"list(alpha, beta)","code":""},{"path":"https://edahelsinki.github.io/slise/reference/slise_initialisation_candidates2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initialise the graduated optimisation by sampling candidates — slise_initialisation_candidates2","text":"chance one subsets contains \"clean\" data :   $$ 1-(1-(1-noise_fraction)^d)^num_init $$ means high-dimensional data (large d) can cause issues, solved using LASSO-regularisation (enables fitting linear models smaller subsets d).","code":""},{"path":"https://edahelsinki.github.io/slise/reference/slise_initialisation_lasso.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialise the graduated optimisation with a LASSO solution — slise_initialisation_lasso","title":"Initialise the graduated optimisation with a LASSO solution — slise_initialisation_lasso","text":"Initialise graduated optimisation LASSO solution","code":""},{"path":"https://edahelsinki.github.io/slise/reference/slise_initialisation_lasso.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialise the graduated optimisation with a LASSO solution — slise_initialisation_lasso","text":"","code":"slise_initialisation_lasso(   X,   Y,   weight = NULL,   lambda1 = 0,   max_iterations = 300,   ... )"},{"path":"https://edahelsinki.github.io/slise/reference/slise_initialisation_lasso.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialise the graduated optimisation with a LASSO solution — slise_initialisation_lasso","text":"X data matrix Y response vector weight weight vector (default: NULL) lambda1 L1 regularisation (default: 0) max_iterations ncol(X) huge, ols replaced optimisation (default:300) ... unused parameters","code":""},{"path":"https://edahelsinki.github.io/slise/reference/slise_initialisation_lasso.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialise the graduated optimisation with a LASSO solution — slise_initialisation_lasso","text":"list(alpha, beta)","code":""},{"path":"https://edahelsinki.github.io/slise/reference/slise_initialisation_ols.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialise the graduated optimisation with an ","title":"Initialise the graduated optimisation with an ","text":"Initialise graduated optimisation \"Ordinary Least Squares\" solution","code":""},{"path":"https://edahelsinki.github.io/slise/reference/slise_initialisation_ols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialise the graduated optimisation with an ","text":"","code":"slise_initialisation_ols(   X,   Y,   epsilon,   weight = NULL,   beta_max = 20/epsilon^2,   max_approx = 1.15,   max_iterations = 300,   beta_max_init = 2.5/epsilon^2,   ... )"},{"path":"https://edahelsinki.github.io/slise/reference/slise_initialisation_ols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialise the graduated optimisation with an ","text":"X data matrix Y response vector epsilon error tolerance weight weight vector (default: NULL) beta_max maximum starting sigmoid steepness (default: 20/epsilon^2) max_approx target approximation ratio (default: 1.15) max_iterations ncol(X) huge, ols replaced optimisation (default:300) beta_max_init maximum sigmoid steepness initialisation ... unused parameters","code":""},{"path":"https://edahelsinki.github.io/slise/reference/slise_initialisation_ols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialise the graduated optimisation with an ","text":"list(alpha, beta)","code":""},{"path":"https://edahelsinki.github.io/slise/reference/slise_initialisation_zeros.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialise the graduated optimisation with a zero-vector — slise_initialisation_zeros","title":"Initialise the graduated optimisation with a zero-vector — slise_initialisation_zeros","text":"Initialise graduated optimisation zero-vector","code":""},{"path":"https://edahelsinki.github.io/slise/reference/slise_initialisation_zeros.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialise the graduated optimisation with a zero-vector — slise_initialisation_zeros","text":"","code":"slise_initialisation_zeros(   X,   Y,   epsilon,   weight = NULL,   beta_max = 20/epsilon^2,   max_approx = 1.15,   beta_max_init = 2.5/epsilon^2,   ... )"},{"path":"https://edahelsinki.github.io/slise/reference/slise_initialisation_zeros.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialise the graduated optimisation with a zero-vector — slise_initialisation_zeros","text":"X data matrix Y response vector epsilon error tolerance weight weight vector (default: NULL) beta_max maximum starting sigmoid steepness (default: 20/epsilon^2) max_approx target approximation ratio (default: 1.15) beta_max_init maximum sigmoid steepness initialisation ... unused parameters","code":""},{"path":"https://edahelsinki.github.io/slise/reference/slise_initialisation_zeros.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialise the graduated optimisation with a zero-vector — slise_initialisation_zeros","text":"list(alpha, beta)","code":""},{"path":"https://edahelsinki.github.io/slise/reference/sparsity.html","id":null,"dir":"Reference","previous_headings":"","what":"Sparsity\nCount the non-zero coefficients — sparsity","title":"Sparsity\nCount the non-zero coefficients — sparsity","text":"Sparsity Count non-zero coefficients","code":""},{"path":"https://edahelsinki.github.io/slise/reference/sparsity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sparsity\nCount the non-zero coefficients — sparsity","text":"","code":"sparsity(x, treshold = .Machine$double.eps)"},{"path":"https://edahelsinki.github.io/slise/reference/sparsity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sparsity\nCount the non-zero coefficients — sparsity","text":"x vector treshold threshold zero","code":""},{"path":"https://edahelsinki.github.io/slise/reference/sparsity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sparsity\nCount the non-zero coefficients — sparsity","text":"number non-zero values","code":""},{"path":"https://edahelsinki.github.io/slise/reference/unscale.html","id":null,"dir":"Reference","previous_headings":"","what":"Unscale a scaled matrix / vector — unscale","title":"Unscale a scaled matrix / vector — unscale","text":"Unscale scaled matrix / vector","code":""},{"path":"https://edahelsinki.github.io/slise/reference/unscale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unscale a scaled matrix / vector — unscale","text":"","code":"unscale(x, scaled = NULL)"},{"path":"https://edahelsinki.github.io/slise/reference/unscale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unscale a scaled matrix / vector — unscale","text":"x matrix / vector unscale scaled optional object \"scaled:...\" attributes","code":""},{"path":"https://edahelsinki.github.io/slise/reference/unscale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unscale a scaled matrix / vector — unscale","text":"x unscaled","code":""},{"path":"https://edahelsinki.github.io/slise/reference/which_min_n.html","id":null,"dir":"Reference","previous_headings":"","what":"Which min n\nGet the indecies of the n smallest values using partial sort — which_min_n","title":"Which min n\nGet the indecies of the n smallest values using partial sort — which_min_n","text":"min n Get indecies n smallest values using partial sort","code":""},{"path":"https://edahelsinki.github.io/slise/reference/which_min_n.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Which min n\nGet the indecies of the n smallest values using partial sort — which_min_n","text":"","code":"which_min_n(x, n)"},{"path":"https://edahelsinki.github.io/slise/reference/which_min_n.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Which min n\nGet the indecies of the n smallest values using partial sort — which_min_n","text":"x vector n number indices","code":""},{"path":"https://edahelsinki.github.io/slise/reference/which_min_n.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Which min n\nGet the indecies of the n smallest values using partial sort — which_min_n","text":"vector indecies","code":""}]
